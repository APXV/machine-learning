{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "classification_01-checkpoint.ipynb",
      "provenance": [],
      "toc_visible": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "we88qnNeeGGH",
        "colab_type": "text"
      },
      "source": [
        "# Classificação\n",
        "\n",
        "## O que é classificação?\n",
        "\n",
        "Métodos de classificação fazem parte do conjunto de técnicas de aprendizado supervisionado. No processo de classificação estamos interessados em prever classes para um conjunto de dados. Classes são, frequentemente, chamadas de alvos/labels ou categorias. Modelos preditivos de classificação possuem a tarefa de ajustar uma função de mapeamento $f$ com variáveis de entrada $X$ e variáveis discretas de saída $y$.\n",
        "\n",
        "Por exemplo, a detecção de spam em provedores de email pode ser identificada como um problema de classificação. Este, é um classificador binário já que existem somente duas classes (spam ou não spam). Um classificador utiliza um conjunto de dados de treinamento para entender como as variáveis de entreda se relacionam com a variável de saída. Nesse caso, emails spam e não spam precisam ser utilizados como dado de treinamento. Quando o classificador é devidamente treinado, este pode ser utilizado para detectar novos emails desconhecidos.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rwdRn5IJeGGL",
        "colab_type": "text"
      },
      "source": [
        "## Classificador KNN (k-nearest neighbors)\n",
        "\n",
        "O classificador KNN faz parte do conjunto de classificadores Lazy. Este, utiliza medidas de distância entre os pontos já classificados e o ponto a ser classificado para teterminar a classe do mesmo, onde o parâmetro conhecido como tamanho da vizinhança estabelece o númmero de pontos próximos considerados. \n",
        "\n",
        "Para demonstrar o uso do KNN, utilizaremos os dados contidos no arquivo ```exemplo2.csv```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "__tYL9N_eGGP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "d0098249-b11e-4161-eadb-c4796bdd584b"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df = pd.read_csv('/exemplo2.csv')\n",
        "df.head()\n",
        "df"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>idade</th>\n",
              "      <th>conta_corrente</th>\n",
              "      <th>risco</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21.257389</td>\n",
              "      <td>783.127911</td>\n",
              "      <td>ruim</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21.766573</td>\n",
              "      <td>979.747521</td>\n",
              "      <td>bom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25.321033</td>\n",
              "      <td>1065.328054</td>\n",
              "      <td>ruim</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>23.919268</td>\n",
              "      <td>1195.758078</td>\n",
              "      <td>bom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>21.805298</td>\n",
              "      <td>1083.764450</td>\n",
              "      <td>bom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2495</th>\n",
              "      <td>63.840703</td>\n",
              "      <td>2847.204903</td>\n",
              "      <td>ruim</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2496</th>\n",
              "      <td>57.367341</td>\n",
              "      <td>3238.149058</td>\n",
              "      <td>bom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2497</th>\n",
              "      <td>65.785408</td>\n",
              "      <td>2603.620751</td>\n",
              "      <td>ruim</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2498</th>\n",
              "      <td>52.944838</td>\n",
              "      <td>2985.948214</td>\n",
              "      <td>ruim</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2499</th>\n",
              "      <td>52.426936</td>\n",
              "      <td>3673.193947</td>\n",
              "      <td>bom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2500 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "          idade  conta_corrente risco\n",
              "0     21.257389      783.127911  ruim\n",
              "1     21.766573      979.747521   bom\n",
              "2     25.321033     1065.328054  ruim\n",
              "3     23.919268     1195.758078   bom\n",
              "4     21.805298     1083.764450   bom\n",
              "...         ...             ...   ...\n",
              "2495  63.840703     2847.204903  ruim\n",
              "2496  57.367341     3238.149058   bom\n",
              "2497  65.785408     2603.620751  ruim\n",
              "2498  52.944838     2985.948214  ruim\n",
              "2499  52.426936     3673.193947   bom\n",
              "\n",
              "[2500 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rCi_ZNSQeGGj",
        "colab_type": "text"
      },
      "source": [
        "Semelhante ao ```exemplo1.csv```, esse arquivo contem a idade e o valor em conta de clientes em um banco. No ```exemplo2.csv```, foi acrescentada uma nova coluna identificando se o risco do cliente é bom ou ruim. Essa medida está associada a experiencia positiva ou negativa com crédito oferecido pelo banco.\n",
        "\n",
        "Abaixo, temos a gráfico de dispersão comparando a idade e valor em conta para cada tipo de risco."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "041UWyAveGGm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "outputId": "7cd9f455-cdda-4215-a14d-4009142038e5"
      },
      "source": [
        "plt.figure(figsize=(15, 8))\n",
        "plt.scatter(df[df.risco == 'ruim'].idade, df[df.risco == 'ruim'].conta_corrente)\n",
        "plt.scatter(df[df.risco == 'bom'].idade, df[df.risco == 'bom'].conta_corrente)\n",
        "plt.xlabel('idade')\n",
        "plt.ylabel('conta corrente')\n",
        "plt.legend(['ruim', 'bom'])"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f20a0451f98>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yznsssTjeGGz",
        "colab_type": "text"
      },
      "source": [
        "### Separando _inputs_ e _outputs_\n",
        "Para efetuar o treinamento do classificador, guardaremos as variáveis de entrada em uma variáveis chamada ```X``` e a variável de saída em ```y```. Para tanto, utilizaremos o comando ```DataFrame.drop('nome_da_coluna_excluida', axis=zero_para_linhas_um_para_colunas)```. Para o exemplo, eliminaremos a coluna ```risco``` das variáveis de entrada."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lquj0hxweGG0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "d959ede7-00b0-41d6-e2d8-5b225d02e2ee"
      },
      "source": [
        "X = df.drop('risco', axis=1)\n",
        "y = df.risco\n",
        "y\n"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       ruim\n",
              "1        bom\n",
              "2       ruim\n",
              "3        bom\n",
              "4        bom\n",
              "        ... \n",
              "2495    ruim\n",
              "2496     bom\n",
              "2497    ruim\n",
              "2498    ruim\n",
              "2499     bom\n",
              "Name: risco, Length: 2500, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7N-tdgcZgr0g",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "92b35fb7-f24c-4d47-ceee-c8b098b23a70"
      },
      "source": [
        "X"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>idade</th>\n",
              "      <th>conta_corrente</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21.257389</td>\n",
              "      <td>783.127911</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21.766573</td>\n",
              "      <td>979.747521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25.321033</td>\n",
              "      <td>1065.328054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>23.919268</td>\n",
              "      <td>1195.758078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>21.805298</td>\n",
              "      <td>1083.764450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2495</th>\n",
              "      <td>63.840703</td>\n",
              "      <td>2847.204903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2496</th>\n",
              "      <td>57.367341</td>\n",
              "      <td>3238.149058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2497</th>\n",
              "      <td>65.785408</td>\n",
              "      <td>2603.620751</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2498</th>\n",
              "      <td>52.944838</td>\n",
              "      <td>2985.948214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2499</th>\n",
              "      <td>52.426936</td>\n",
              "      <td>3673.193947</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2500 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "          idade  conta_corrente\n",
              "0     21.257389      783.127911\n",
              "1     21.766573      979.747521\n",
              "2     25.321033     1065.328054\n",
              "3     23.919268     1195.758078\n",
              "4     21.805298     1083.764450\n",
              "...         ...             ...\n",
              "2495  63.840703     2847.204903\n",
              "2496  57.367341     3238.149058\n",
              "2497  65.785408     2603.620751\n",
              "2498  52.944838     2985.948214\n",
              "2499  52.426936     3673.193947\n",
              "\n",
              "[2500 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sxHQyMe6eGG-",
        "colab_type": "text"
      },
      "source": [
        "### Utilizando o KNN no python\n",
        "\n",
        "O objetivo do classificador será a determinação do risco de uma novo cliente, baseado na idade e valor em conta corrente do mesmo.\n",
        "\n",
        "O classificador KNN está presente no pacote ```sklearn``` no caminho ```sklearn.neighbors``` e é identificado como ```KNeighborsClassifier```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VZ-txq0BeGHA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sn77-BNleGHK",
        "colab_type": "text"
      },
      "source": [
        "### Treinamento do classificador\n",
        "Para executar o treinamento do classificador, criaremos um objeto da classe ```KNeighborsClassifier``` dando o nome de ```knn```. Nesse exemplo, criaremos um KNN com número de vizinnhos igual a 3. Para tanto, passaremos o atributo ```n_neighbors=3```. Para executar a treinamento do "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hUYoHLfDeGHN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "1dac049c-ca7b-4e15-a937-6396b8f9b8a3"
      },
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=3)\n",
        "knn.fit(X, y)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=3, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yx928BpleGHX",
        "colab_type": "text"
      },
      "source": [
        "### Previsões de classe\n",
        "Uma vez treinado, o classificador pode ser utilizado para determinar se um novo cliente possui risco bom ou ruim. Para tanto, utilizamos o comando ```predict()```. Faremos a previsão do risco para um novo cliente com 18 anos e 700 reais na conta corrente."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M7w1ZrSPeGHY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "88e5678c-3a39-4535-a738-65d324f0dfb3"
      },
      "source": [
        "knn.predict([[18, 10]])"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['bom'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X78qqBjreGHh",
        "colab_type": "text"
      },
      "source": [
        "Obtemos a previsão do novo  cliente. Mas qual a certeza dessa previsão? Como verificar se o classificador possui uma boa qualidade nas previsões?\n",
        "### Avaliando o classificador\n",
        "O método mais usual de aferição da qualidade de um classificador é a aplicação de um teste em parte do conjunto utilizado originalmente para treinamento. Como a porção separada para teste já está classificada, podemos medir o percentual de acerto do classificador, verificando assim a sua qualidade. Para separar o conjunto de treino e o conjunto de testes, utilizamos a função ```train_test_split()``` presente em ```sklearn.model_selection```. Para o cálculo da acurácia, utilizamos a função ```accuracy_score()``` presente em ```sklearn.metrics```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VoetxF2MeGHi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n-V1cHSgeGHq",
        "colab_type": "text"
      },
      "source": [
        "Criaremos as variáveis ```X_train``` e ```y_train``` representando os inputs e outputs de treinamento e ```X_test```, ```y_test``` representando os inputs e outputs de teste. Na função ```train_test_split()``` passaremos como parâmetro o conjunto completo de inputs e outputs ```X``` e ```y``` juntamente com o parâmetro ```test_size``` (tamanho do conjunto de teste), que configuraremos com o valor de 0.33 (1/3). Para fixar a aleatoriedade da divisão dos conjuntos, configuraremos o parâmetro ```random_state=42```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LWwN6nS0eGHs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3, random_state=42)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4PAubJDIeGH0",
        "colab_type": "text"
      },
      "source": [
        "Criaremos um novo classificador KNN configurado com ```n_neighbors=5``` e o chamaremos de ```knn5```. Uma vez treinado, calcularemos a acuracidade do classificador utilizando a função ```accuracy_score()``` que recebe como parâmetros os inputs conhecidos e os inputs previstos."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ma_AaoeIeGH1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "ee0049cd-ad95-4472-93cb-faaabb4c53b6"
      },
      "source": [
        "knn5 = KNeighborsClassifier(n_neighbors=1).fit(X_train, y_train)\n",
        "\n",
        "accuracy_score(y_test, knn2.predict(X_test))"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.802158273381295"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cop12CGaeGH8",
        "colab_type": "text"
      },
      "source": [
        "### Pré processando _inputs_\n",
        "Podemos aumentar a qualidade do classificador através do tratamento dos inputs. Para classificadores baseados em cálculo de distância, obetemos resultados melhores através da normalização das variáveis de _input_. Nesse caso, temos duas variáveis que possuem escalas distintas (idade e conta corrente). Aplicando uma função de normalização, podemos aumentar significamente a qualidade da acurácia.\n",
        "\n",
        "Para o exemplo, aplicaremos o normalizador ```MinMaxScaler```, comprimindo os dados no intervalo entre 0 e 1. Criaremos um objeto da classe ```MinMaxScaler``` chamado ```normalizador``` e utilizaremos o comando ```MinMaxScaler.fit_transform()``` para ajustar o normalizador aos dados e executar a transformação do mesmo, passando como parâmetro o ```DataFrame``` contendo somente as colunas ```idade``` e ```conta_corrente```. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gRfs874-eGH_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "outputId": "f633ac75-ba7c-42bb-f5d1-5a12eb3fa1b7"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "normalizador = MinMaxScaler()\n",
        "X_norm = normalizador.fit_transform(df[['idade', 'conta_corrente']])\n",
        "X_norm"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.05586473, 0.06720224],\n",
              "       [0.06499436, 0.09938945],\n",
              "       [0.12872564, 0.11339923],\n",
              "       ...,\n",
              "       [0.85424954, 0.36522222],\n",
              "       [0.62401886, 0.42781034],\n",
              "       [0.61473291, 0.54031447]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LS3PI05WeGIJ",
        "colab_type": "text"
      },
      "source": [
        "Para verificar se houve melhoria na qualidade do classificador, repetimos o procedimento de teste."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wv99q4W2eGIL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "7ba4d1aa-0bfb-4b4a-cb84-2035a8f0c6f1"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X_norm, y, test_size=0.33, random_state=42)\n",
        "\n",
        "knn3 = KNeighborsClassifier(n_neighbors=5).fit(X_train, y_train)\n",
        "\n",
        "accuracy_score(y_test, knn3.predict(X_test))"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8715151515151515"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nfj4rrczeGIU",
        "colab_type": "text"
      },
      "source": [
        "Observamos o aumento na precisão do classificador de 0.8021 para 0.8715."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zJOqqIvEeGIV",
        "colab_type": "text"
      },
      "source": [
        "### Previsões com dados normalizados\n",
        "Para dados normalizados, precisamos aplicar a mesma normalização executada nos dados de treinamento, nos dados de previsão utilizando o comando ```MinMaxScaler.transform()```. Para prever o risco de um novo cliente com 18 anos e movimentação de 1000 reais, por exemplo, não podemos passar esses valores sem aplicar a normalização. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cqy5KUMYeGIW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "65980811-cb20-4f04-8bc6-7c2e5b286fdc"
      },
      "source": [
        "X_new = [[18, 1000]]\n",
        "X_new = normalizador.transform(X_new)\n",
        "knn3.predict(X_new)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['bom'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Moib3aXgeGId",
        "colab_type": "text"
      },
      "source": [
        "Para efeito de teste, faremos a comparação do desempenho do knn com outros dois classificadores.\n",
        "\n",
        "### SVM (Support Vector Machine)\n",
        "\n",
        "O SVM é um classificador discriminativo formalmente definido por um hiperplano de separação. Em outras palavras, dado um conjunto de dados de treinamento classificados (aprendizado supervisionado), o algoritmo gera um hiperplano ideal que categoriza novos exemplos. No espaço bidimensional, esse hiperplano é uma linha que divide um plano em duas partes, onde cada classe fica em cada lado."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CsdtG49geGIe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "d41df10d-988c-42d1-97fd-4ec1f5a53265"
      },
      "source": [
        "from sklearn.svm import SVC\n",
        "\n",
        "svc = SVC().fit(X_train, y_train)\n",
        "\n",
        "accuracy_score(y_test, svc.predict(X_test))"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8387878787878787"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3G_cUX61eGIp",
        "colab_type": "text"
      },
      "source": [
        "## Floresta Aleatória\n",
        "\n",
        "A floresta aleatória, como o próprio nome indica, consiste em um grande número de árvores de decisão individuais que funcionam como um conjunto. Cada árvore individual na floresta aleatória gera uma previsão de classe e a classe com mais votos se torna a previsão do nosso modelo.\n",
        "\n",
        "O conceito fundamental por trás da floresta aleatória é simples, mas poderoso: a sabedoria das multidões. Na linguagem da ciência de dados, a razão pela qual o modelo funciona tão bem está associado ao fato de que um grande número de modelos (árvores) relativamente não correlacionados que operam como um comitê superará qualquer um dos modelos constituintes individuais.\n",
        "\n",
        "Para este modelo, o parâmetro mais básico a ser definido é o número de árvores presente na floresta. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eASyPbxJeGIq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "ee2ce8b4-d366-40da-b6d4-82e4efd8dd40"
      },
      "source": [
        "from  sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "rfc = RandomForestClassifier(n_estimators=100, random_state=42).fit(X_train, y_train)\n",
        "\n",
        "accuracy_score(y_test, rfc.predict(X_test))"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8872727272727273"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l4DgOwI_eGI-",
        "colab_type": "text"
      },
      "source": [
        "Os dados contidos no arquivo ```exemplo3.csv``` apresentam um exemplo semelhante ao anterior, onde neste considera-se também o sexo do cliente."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F69B4SNBeGI_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df2 = pd.read_csv('dados/exemplo3.csv')\n",
        "df2.head()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XQbOtMwNeGJH",
        "colab_type": "text"
      },
      "source": [
        "Para coluna ```sexo```, faremos a transformação através da binarização de variáveis categóricas. Utilizando o comando ``` pd.get_dummies(Series, prefix='nome_do_prefixo')```, criaremos as colunas ```sexo_feminino``` e ```sexo_masculino```, onde o valor 1 representa o valor verdadeiro e 0 o falso."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kb2HtDnLeGJI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sexo = pd.get_dummies(df2.sexo, prefix='sexo')\n",
        "sexo.head()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I1DHt342eGJN",
        "colab_type": "text"
      },
      "source": [
        "Para concatenar o dataframe ```sexo``` com ```df2```, utilizamos o comando ```pd.concat(lista_de_dataframes, axis=1)```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MIEHbVjJeGJO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df2 = pd.concat([df2, sexo], axis=1)\n",
        "df2.head()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yIpbpxMNeGJW",
        "colab_type": "text"
      },
      "source": [
        "Aplicaremos o normalizador ```MinMaxScaler()``` para as colunas ```idade``` e ```conta_corrente```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-9B8O3DeGJW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "minmax = MinMaxScaler().fit(df[['idade', 'conta_corrente']])\n",
        "df2[['idade', 'conta_corrente']] = minmax.transform(df[['idade', 'conta_corrente']]) \n",
        "df2.head()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jxek44XQeGJc",
        "colab_type": "text"
      },
      "source": [
        "Finalmente, aplicamos o treinamento e teste do classificador para verificar a acurácia do mesmo."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ttHBesf5eGJf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X = df2.drop(['risco', 'sexo'], axis=1)\n",
        "y = df2.risco\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n",
        "\n",
        "rfc2 = RandomForestClassifier(n_estimators=100, random_state=42).fit(X_train, y_train)\n",
        "\n",
        "accuracy_score(y_test, rfc2.predict(X_test))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u8jswCSzeGJm",
        "colab_type": "text"
      },
      "source": [
        "O código abaixo mostra a aplicação do classificador."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q7vm-Ye5eGJn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "idade = 22\n",
        "cc = 1200\n",
        "sexo = 'masculino'\n",
        "\n",
        "s = {'masculino': [0, 1], 'feminino': [1, 0]}\n",
        "values = np.append(minmax.transform([[idade, cc]])[0], s[sexo])\n",
        "rfc2.predict([values])"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}